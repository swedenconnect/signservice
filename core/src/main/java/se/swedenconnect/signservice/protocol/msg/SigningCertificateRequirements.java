/*
 * Copyright 2022-2024 Sweden Connect
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.swedenconnect.signservice.protocol.msg;

import java.io.Serializable;
import java.util.List;

import se.swedenconnect.signservice.certificate.CertificateType;

/**
 * When sending a SignRequest, a sign requester specifies a set of requirements for the signature certificate that is
 * generated by the sign service. This class represents these requirements.
 */
public interface SigningCertificateRequirements extends Serializable {

  /**
   * The requirements of a signing certificate may be represented using a profile. This profile may cover things like
   * certificate types and attribute mappings (see {@link #getCertificateType()} and {@link #getAttributeMappings()})
   * but also more fine-grained settings of how a signing certificate is created such as one or more certificate
   * policies.
   *
   * @return the profile or null if none has been given
   */
  String getSigningCertificateProfile();

  /**
   * Gets the requested certificate type.
   *
   * @return the requested certificate type, or null if not set
   */
  CertificateType getCertificateType();

  /**
   * Gets the requested mappings between the signer's authentication attributes and attributes that are to be placed in
   * the issued signature certificate.
   * <p>
   * If a profile is given that regulates the attribute mappings, this list is not required.
   * </p>
   *
   * @return a list of mapping directives of how to map from user/signer attributes to signature certificate attributes,
   *           or null if no mapping has been provided
   */
  List<CertificateAttributeMapping> getAttributeMappings();

}
